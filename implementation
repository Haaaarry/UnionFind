class WeightedQuickUnionUF{
      private int []m_iParent;
      private int []m_iSize; 
      private int m_iMostUnionedSites;
      private int []m_iMax
      
      
      public WeightedQuickUnionUF(int N){
           m_iParent=new int [N];
           m_iSize=new int [N];
           m_iMax=new int [N];
           
           for(int i=0;i<N;i++){
              m_iParent[i]=i;
              m_iSize[i]=1;
              m_iMax[i]=i;
           }
           m_iMostUnionedSites=1;
      }
      
      
    private int root(int p){
        while(m_iParent[p]!=p)
            p=m_iParent[p];
        return p;   
    }
    
    
    public void union(int p,int q){
        int rootP=root(p);
        int rootQ=root(q);
        
        int max=m_iMax[rootP]>m_iMax[rooQ]?m_iMax[rootP]:m_iMax[rooQ];
        if(m_iSize[rootQ]>m_iSize[rootP]){
            m_iParent[rootP]=rootQ;
            m_iSize[rootQ]+=m_iSize[rootP];
            m_iMax[rootQ]=max;
            
            if(m_iSize[rootQ]>m_iMostUnionedSites)
                m_iMostUnionedSites=m_iSize[rootQ];
        }
        else{
            m_iParent[rootQ]=rootP;
            m_iSize[rootP]+=m_iSize[rootQ];
            m_iMax[rootP]=max;
            
            if(m_iSize[rootP]>m_iMostUnionedSites)
                m_iMostUnionedSites=m_iSize[rootP];
        }
     }
     
     public int find(int i){
     //在到所有与i相连的结点中，找到最大的那个
          int rootI=root(i);
          return m_iMax[rootI];
     }
     
  
} 
